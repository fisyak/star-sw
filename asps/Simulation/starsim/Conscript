#!/usr/bin/env perl
#use Env;
############################################################
# $Id: Conscript,v 1.21 2016/04/27 11:29:09 jeromel Exp $
#
# $Log: Conscript,v $
# Revision 1.21  2016/04/27 11:29:09  jeromel
# Fix regexp issue
#
# Revision 1.20  2013/11/18 20:30:09  jeromel
# hardwired -m32 for sl53 should not be needed since LDFLAGS gets that from a central place
#
# Revision 1.19  2009/11/13 17:31:45  fisyak
# remove second FLIBS
#
# Revision 1.18  2009/11/13 17:08:15  fisyak
# Add extra -m32 for LD
#
# Revision 1.17  2009/11/13 16:52:51  fisyak
# swit LDto g++ with gfortran
#
# Revision 1.16  2009/09/03 15:16:17  jeromel
# Changed rh8/rh9 to rh and added gfortran support
#
# Revision 1.15  2005/11/30 16:20:07  fisyak
# adjust for icc
#
# Revision 1.14  2005/09/12 14:40:34  fisyak
# add missing ';'
#
# Revision 1.13  2005/08/29 23:03:36  fisyak
# add FPP flag for non pgi version
#
# Revision 1.12  2005/07/19 15:54:19  fisyak
# Fix handle PGI version
#
# Revision 1.11  2005/07/18 22:22:11  fisyak
# Add flag WithoutPGI to get free_ and malloc_ without PGI
#
# Revision 1.10  2004/11/23 01:38:46  potekhin
# Added i386 to the "if" statement to insure compilation
# on the older RH 7.x systems. Added the CVS ID line for
# better documentation.
#
############################################################
Import qw ( env INCLUDE LIB BIN BUILD OBJ);
(my $build = $OBJ) =~ s/\#//g;
$build =~ s/\\/\//g;# print "OBJ = $OBJ build = $build MAIN = $MAIN\n";
(my $ObjDir = DirPath '.') =~ s/\\/\//g;# print "ObjDir = $ObjDir\n";
(my $Dir = $ObjDir) =~ s/$build\///g; #print "Dir = $Dir\n";
$ObjDir = "#" . $ObjDir;# print "ObjDir = $ObjDir\n";
my $STAR_SYS = $env->{ENV}->{STAR_SYS};
my $FC     = $env->{FC};
my $FCPATH = $env->{FCPATH};
my $FFLAGS = $env->{FFLAGS};
my $FPPFLAGS = $env->{FPPFLAGS};# print "============ FPPFLAGS = $FPPFLAGS\n";
$FPPFLAGS .= " " . $env->{Packages}->{CERNLIB}->{FPPFLAGS};# print "============ FPPFLAGS = $FPPFLAGS\n";
my $FEXTEND = $env->{FEXTEND};
my $CPPFLAGS = $env->{CPPFLAGS};# print "============ CPPFLAGS = $CPPFLAGS\n";
$CPPFLAGS .= " " . $env->{Packages}->{CERNLIB}->{CPPFLAGS};# print "============ CPPFLAGS = $CPPFLAGS\n";
my $CPPPATH = $env->{CPPPATH};
my $pkg  = "starsim"; 
my $PKG = $pkg;     print "Run cons in $Dir for $PKG\n";
my $SO_PKG = $PKG . "." . $env->{SUFSOLIB};# print "SO_PKG = $SO_PKG\n";
my $LIBPKG = "lib" . $PKG . "." . $env->{SUFLIB};# print "LIBPKG = $LIBPKG =========\n";
$FCPATH  = "#asps/Simulation/starsim/include";
$FCPATH .= $main::PATH_SEPARATOR . "#asps/Simulation/gcalor/include";
$FCPATH .= $main::PATH_SEPARATOR . "#asps/Simulation/geant321/include";
$FCPATH .= $main::PATH_SEPARATOR . $env->{ENV}->{CERN_ROOT} . "/include";
#$FPPFLAGS .= " -D__ROOT_ -DCERNLIB_TYPE -DCERNLIB_UNIX " .
$FPPFLAGS .= " " .
#  "-DCERNLIB_BSLASH -DCERNLIB_DZDOC -DCERNLIB_SHL " .
#  "-DCERNLIB_NONEWL -DCERNLIB_HIGZ  -DCERNLIB_CG  " .
  "-DCERNLIB_HADRON -DCERNLIB_GCALOR";
$FPPFLAGS .= " -DCPP_TITLE_CH=\"'" . $pkg . "'\"";
$FPPFLAGS .= " -DCPP_VERS=\"'v*'\"";
$FPPFLAGS .= " -DCPP_DATE=\"`date +%%y%%m%%d`\"";
$FPPFLAGS .= " -DCPP_TIME=\"`date +%%H%%M`\"";
$CPPFLAGS .= " -Df2cFortran";
$CPPPATH  = "#" . $main::PATH_SEPARATOR . "#asps/Simulation/starsim/include";
$CPPPATH .= $main::PATH_SEPARATOR . $env->{Packages}->{MYSQL}->{INCDIR}; 
$CPPPATH .= $main::PATH_SEPARATOR . $env->{ENV}->{CERN_ROOT} . "/include";
$CPPPATH .= $main::PATH_SEPARATOR . $env->{ENV}->{CERN_ROOT} . "/src/pawlib/paw/ntuple";
$CPPPATH .= $main::PATH_SEPARATOR . $env->{Packages}->{ROOT}->{INCDIR};
$CPPFLAGS  .= " -DCERNLIB_DZDOC -DCERNLIB_NONEWL -DCERNLIB_SHL -DCERNLIB_HADRON -DCERNLIB_BSLASH -DCERNLIB_HIGZ -DCERNLIB_CG";
my $DEBUG = $env->{DEBUG}; $DEBUG = "-g";
my $FDEBUG = $env->{FDEBUG}; $FDEBUG = $DEBUG;
if ($STAR_SYS =~ /^rh/ or $STAR_SYS =~ /^sl/ or $STAR_SYS =~ /^i386/) {
  # $FPPFLAGS .= " -DCERNLIB_MYSQL -DCERNLIB_QMGLIBC";
  $CPPFLAGS .= " -DCERNLIB_MYSQL";
  $CPPFLAGS .= " -Df2cFortran -DCERNLIB_QMGLIBC";
}
if ($STAR_SYS =~ /x8664/ || $STAR_SYS =~ /darwin/) {
  $FPPFLAGS .= " -DCERNLIB_QMLXIA64 -D__NON_ELASTIC_ZEBRA__ ";
  $CPPFLAGS .= " -DCERNLIB_QMLXIA64 -D__NON_ELASTIC_ZEBRA__";
}
#  $FPPFLAGS .= " -D__NON_ELASTIC_ZEBRA__ ";
#  $CPPFLAGS .= " -D__NON_ELASTIC_ZEBRA__";

if ($FC =~ /pgf77/) { 
  $FC       = $env->{G77}; 
#  print "set FC => $FC ==============================\n" if $param::debug;
  $FFLAGS   = $env->{G77FLAGS}; 
  $FEXTEND  = $env->{G77EXTEND};
}
my $PGI = $env->{ENV}->{PGI};
if (($FC =~ /g77/ || $FC =~ /gfortran/) && ! $PGI) {
    $CPPFLAGS .= " -DWithoutPGI";
}
if ($FC =~ /gfortran/) {$FPPFLAGS .= " -DGFORTRAN";}
$FPPFLAGS .= " -D__TPCREFSYS__"; # generate TpcRefSys in g2root
# print "DEBUG --> $FC $CPPFLAGS\n";
$env2 = $env->clone('FC'           => $FC,
		    'FPPFLAGS'     => $FPPFLAGS,
		    'FFLAGS'       => $FFLAGS,
		    'FCPATH'       => $FCPATH,
		    'FEXTEND'      => "",
		    'FDEBUG'       => $FDEBUG,
		    'CFLAGS'       => "$env->{CFLAGS} -fcommon",
		    'CPPFLAGS'     => $CPPFLAGS,
		    'CPPPATH'      => $CPPPATH,
		    'AGETOFLAGS'   => "",
		    'LIBS'         => $LIBS,
		    'ObjDir'       => $obj_dir,
		    'Libraries'    => $Libraries,
		    'DEBUG'        => $DEBUG,
		    'FDEBUG'       => $FDEBUG
		   );
my @src  = find_sources($Dir);
my $pwd = Cwd::cwd();# print "pwd = $pwd  Dir => $Dir\n";
my @sources = ();
my $FFLAGS_NoSTATICS = $FFLAGS; 
#print "FFLAGS           = $FFLAGS\n";
#print "FFLAGS_NoSTATICS =  $FFLAGS_NoSTATICS\n";
$FFLAGS_NoSTATICS =~ s| \-fno\-automatic| \-frecursive|;
#print "FFLAGS_NoSTATICS =  $FFLAGS_NoSTATICS\n";
$env3 = $env2->clone('FFLAGS'       => $FFLAGS_NoSTATICS);
#print "new FFLAGS = env3 : $env3->{FFLAGS} ==================\n";
foreach my $s (@src) {
  my @list = glob "$Dir/$s"; #print "$s => list = @list\n";
  foreach my $ss (@list) {
    $ss =~ s/$Dir\///;# print "$ss\n";
    next if ($ss =~ /atlroot/);
    next if ($ss =~ /acmain\.cxx/);
    next if ($ss =~ /deccc\/traceqc\.c/);
    next if ($ss =~ /deccc\/mykuip\.c/);
    next if ($ss =~ /atmain\/traceq\.age/);
    next if ($ss =~ /deccc\/idisp\.c/    && $FC !~ /g77/ && $FC !~ /gfortran/);
    next if ($ss =~ /atmain\/agxinit\.cdf/);
    next if ($ss =~ /atmain\/guinti\.cdf/);
    next if ($ss =~ /atmain\/sterror\.age/);
    next if ($ss =~ /deccc\/fputools\.c/ && $FC !~ /g77/ && $FC !~ /gfortran/);
    next if ($ss =~ /deccc\/ctype\.c/ and $STAR_SYS !~ /^rh9/);
    next if ($ss =~ /deccc\/cs_dlfcn\.c/ and $STAR_SYS =~ /darwin/);
    my $s = $ss;
#    print "ss = $ss\n";
    if ( $ss =~ /g2Root/ and $FFLAGS ne $FFLAGS_NoSTATICS) {# allow recursion for g2Root
      my @objfiles = Objects $env3 ($ss);
#      print "$ss => $objfiles[0] ===============================\n";
      $s =  $objfiles[0]; 
     } else {
       my @objfiles = Objects $env2 ($ss);
       $s =  $objfiles[0]; 
    }
#    print "s = $s ===================\n";
    push @sources, $s; 
  }
}
if ($#sources > -1) {
#print "DEBUG ".join(" ",@sources)."\n";
  Library      $env2 $LIBPKG, @sources;  
  Install $env2 $LIB, $LIBPKG;
}  

my @starsim = qw(acmain.cxx deccc/traceqc.c atmain/traceq.age atmain/sterror.age deccc/mykuip.c);# deccc/idisp.c);

my $pgm = "starsim";
script::Keep $pgm;
my $LD = $env->{LD};
if ($LD =~ /g++/ && $FC !~ m/gfortran/) {$LD = $env->{CC};}

my $LDFLAGS = $env->{LDFLAGS};
$LDFLAGS .= $env->{LDEXPORT};
# if ($STAR_SYS =~ /sl53_gcc4/) {$LDFLAGS .= " -m32";}

my $LIBPATH    = $env->{LIBPATH};
if ($LIBPATH) {$LIBPATH .= $main::PATH_SEPARATOR;}
$LIBPATH    .= $LIB;
my $LIBS    = $env->{LIBS};
$LIBS .= $env->{LDALL};
if ($LD =~ 'clang')  {
  my $lib = $LIB; $lib =~ s/\#//;
  $LIBS .= " " . $lib . "/libstarsim.a";
} else {
  $LIBS .= " -lstarsim";
}
if ($env->{LIBG2C}) {
  $LIBPATH .= $main::PATH_SEPARATOR . File::Basename::dirname($env->{LIBG2C});
  $LIBS .= " " . $env->{LIBG2C};
  if ( $LD eq 'gcc' or $LD eq 'g++' or $LD =~ 'clang') {$LIBS .= " " . $env->{LIBSTDC};}
}
#if ($LD eq 'icc' ) {$LIBS .= " -lcprts";}
$LIBS .= $env->{LDNONE};
$LIBS .= " -lgeant321";
$LIBS .= " -lgcalor";
#$LIBS .= " -lg2t -lgstar";
my $Libraries = $env->{Libraries};
$LIBPATH .= $main::PATH_SEPARATOR . $env->{Packages}->{MYSQL}->{LIBDIR};
$Libraries .= " " . $env->{CERNLIBS} . " " . $env->{Packages}->{MYSQL}->{LIBS} .
$Libraries .=  " " .   $env->{FLIBS} . " " . $env->{CLIBS} . " " . $env->{SYSLIBS};
$envP = $env2->clone('LDFLAGS'   => $LDFLAGS,
		     'LIBPATH'   => $LIBPATH,
		     'LIBS'      => $LIBS,
		     'LD'        => $LD,
		     'FEXTEND'      => "",
		     'Libraries' => $Libraries
		    );
Depends      $envP $pgm, $LIB . "/libgeant321.a";
Depends      $envP $pgm, $LIB . "/libgcalor.a";
Depends      $envP $pgm, $LIB . "/libstarsim.a";
#Depends      $envP $pgm, $LIB . "/libg2t.a";
#Depends      $envP $pgm, $LIB . "/libgstar.a";
Program      $envP $pgm, @starsim;
my $d = $Dir . "/";
my @list = glob $d . "atlsim.*";# print "Dir  = $Dir; list = @list\n";
foreach my $l (@list) {
  my $f = File::Basename::basename($l); 
  my $s = $f; $s =~ s/atlsim/starsim/; #  print "$l => $s\n";
  Command $envP $BIN ."/". $s, "#" . $d ."/". $f, qq(cp %< %>);
  InstallAs $envP $s, $f;
}		 
Command $envP $BIN . "/" . $pgm, $pgm, qq(cp %< %>);
