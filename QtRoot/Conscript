#!/usr/bin/env perl
use File::Basename;
Import qw ( env INCLUDE LIB BIN BUILD OBJ);
( my $build = $OBJ ) =~ s/\#//g;
( my $mylib = $LIB ) =~ s/\#//g;

$build =~ s/\\/\//g;   #     print "------------- > OBJ = $OBJ  LIB=$mylib build = $build \n"; 
(my $sysdir = $build ) =~ s/\/obj//i; $sysdir =~ s/\/OBJ//i;
#print "PWD === $ENV{PWD}\n"; die;
$env->{ENV}->{QTROOTSYSDIR} = $ENV{PWD} . "/" . $sysdir;# print "QTROOTSYSDIR = $env->{ENV}->{QTROOTSYSDIR}\n";
$env->{ENV}->{QTROOTSYSDIR_LIB} =  basename($mylib);
$env->{ENV}->{QTDIR} = $env->{Packages}->{QT}->{DIR};
$env->{ENV}->{IVROOT} = $env->{Packages}->{COIN3D}->{DIR}; # print "IvRoot = $env->{ENV}->{IVROOT}";
my $STAR_HOST_SYS = $env->{ENV}->{STAR_HOST_SYS};
my $qt4 = ($env->{Packages}->{QT}->{QT_VERSION} == 4);
my $DirPath = DirPath '.';                               #print "DirPath = $DirPath\n";
( my $obj_dir = $DirPath ) =~ s/\\/\//g;                 #print "obj_dir = $obj_dir\n";
( my $Dir = $obj_dir ) =~ s/$build\///g;                 #print "Dir = $Dir\n";
my $PKGT = "QtRoot";

# Import from ENV variables
# $TEMP = $TMP = (defined($ENV{SCRATCH})?$ENV{SCRATCH}:"/tmp");

printf( "Run Conscript          in %-45s  for %-32s\n", $Dir,$PKGT );

my @src = ();
my @dirs = qw(qt qtgui qtimage qtgl qtExamples qtroot qtthread);
push @dirs, "qt4ged";
foreach my $dir (@dirs) {
  my @srcL = find_q($Dir . "/" . $dir); #print "dir = $dir ==> @srcL\n";
  foreach my $s (@srcL) {
    push @src, $dir . "/" . $s;
  }
}
my @DepsL  = map {$LIB . "/lib" . $_ . ".so"}   qw(GQt QtGed QtImage QtRootGui QtRoot QtThread); #  RQTGL
my @DepsL1 = map {$LIB . "/lib" . $_ . ".so.1"} qw(GQt QtGed QtImage QtRootGui QtRoot QtThread); #  RQTGL
my @DepsI  = map {$INCLUDE .  "/TQ" . $_ . ".h"} 
  qw(
      GLKernel        tCanvasWidget         tEvent           tIconBrowserImp      tObjectDialog         tRootBrowserAction  tToolBar
      GLViewerImp     tClientFilter         tEventQueue      tImage               tObjectListItem       tRootBrowserImp     tUpdateViewFlag
      GsiRootCanvas   tClientGuard          tFloatSlider     tInspectImp          tPad2Html             tRootCommandCombo   tUtil
      MimeTypes       tClientWidget         tFloatSpinBox    tLineEditor          tPadEditor            tRootGuiFactory     tWidget
      PadOpenGLView   tColorPickerHelper    tGedAttFrame     tLockGuard           tPadFont              tRootSlot           tZoomPadWidget
      tApplication    tColorSelectButton    tGedEditor       tLock                tPaletteEditor        tRootViewer3D       UserEvent
      tArrowEditor    tColorSelect          tGedFrames       tLockWidget          tPatternSelectButton  tStyleComboBox      VirtualGL
      tAxisEditor     tCommandPlugin        tGLIncludes      tMarkerEditor        tPatternSelect        tSymbolCodec
      tBrowserImp     tCondition            tGLViewerImp     tMarker              tPen                  tTabValidator
      tBrush          tContextMenuImp       tGLViewerWidget  tMarkerSelectButton  tPixmapBox            tTextEditor
      tCanvas2Html    tControlBarImp        tGraphEditor     tMarkerSelect        tRConfig              tThreadFactory
      tCanvasImp      tCustomizeCanvasMenu  tGuiFactory      tMmlTextProxy        tRootAction           tThreadImp
      tCanvasPainter  tEmitter              tGui             tMutex               tRootApplication      tTimer
   );
my $DEBUG = "";
# setenv QMAKESPEC $XOPTSTAR/qt4/mkspecs/linux-g++
if ($STAR_HOST_SYS =~ /darwin/) {
#  $DEBUG .= " -spec macx-g++ ";
#  $DEBUG .= " -spec macx-xcode ";
#  $DEBUG .= " -spec macx-llvm ";
} else {
  if ($STAR_HOST_SYS =~ /icc/) {
    if ($STAR_HOST_SYS !~ /x86/) {$DEBUG .= " -spec linux-icc-32";}
    else                         {$DEBUG .= " -spec linux-icc-64";}
  } else {# gcc
    if ($STAR_HOST_SYS !~ /x86/) {$DEBUG .= " -spec linux-g++-32";}
  }
}
$DEBUG .= " CONFIG+=debug" if $env->{DEBUG} !~ /-O/;
#$DEBUG .= " " . $env->{CXXFLAGS};
#$DEBUG =~ s/-pthread//;
#print "==================== $DEBUG ==========\n";
my $PATH = $ENV{PATH};
#print "PATH = $PATH\n";
if ($PATH) {$PATH .= ":" . $env->{Packages}->{QT}->{BINDIR};}
else       {$PATH .=       $env->{Packages}->{QT}->{BINDIR};}
#print "PATH = $PATH\n";
$ENV{PATH} = $PATH;
$env2 = $env->clone();
$env2->{ENV}->{PATH} = $PATH;
Command $env2 ["Makefile"], qw(qtRoot.pro qtthread/qtthread.pro qt4ged/qt4ged.pro), qq(cd $obj_dir;qmake -query;qmake $DEBUG);
Command $env2 [(@DepsL1, @DepsI)], (Makefile, @src), qq(cd $obj_dir;make;make install);
#Command $env2 [(@DepsL1, @DepsI)], (Makefile), qq(cd $obj_dir;make;make install);
#Command $env2 [@DepsI], (Makefile, @src), qq(cd $obj_dir;make;make install);
#print "DepsL = @DepsL \nDEPSL1 = @DepsL1\n";
# foreach my $l (qw(GQt QtGed QtImage QtRootGui QtRoot QtThread)) {#  RQTGL
#   my $lib = "lib" . $l . ".so";
#   InstallAs $env2 $LIB . "/" . $lib, $lib . ".1";
# }
# Command $env2 ["Makefile"], qw(qtExamples/qtExamples.pro), qq(cd $obj_dir; qmake $DEBUG; make);
#________________________________________
sub find_q{  @main::search_files   = ();
	#     print "find_q for $_[0]\n";
  if (-d $_[0]) {
    &File::Find::find(\&wanted_q, @_);
    for my $dir (@_) {
      if ( -d $dir ) {
	my $i = 0;
	for ($i=0;$i<=$#main::search_files;$i++) {
	   $main::search_files[$i] = cutdir($dir, $main::search_files[$i]);
	}
      }
    }
  }
	     return @main::search_files;
}
#________________________________________
sub wanted_q {
#  print "wanted ",$_,"\n";
  my ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if ( -d _ &&
       (/^CVS$/)
     ) {$File::Find::prune = 1; return;}
  if ( /^\.\#/) {return;}
  if (
      /^\w.*\.c$/       ||
      /^\w.*\.cc$/      ||
      /^\w.*\.cxx$/     ||
      /^\w.*\.cpp$/     ||
      /^\w.*\.g$/       ||
      /^\w.*\.age$/     || #for STAR      /^\w.*\.f$/       ||
      /^\w.*\.cdf$/     ||
      /^\w.*\.F$/       ||
      /^\w.*\.h$/       ||
      /^\w.*\.hh$/      ||
      /^\w.*\.inc$/     ||
      /^\w.*\.hpp$/     ||
      /^\w.*\.icpp$/    ||
      /^\w.*\.icc$/     ||
      /^\w.*\.pro$/     ||
      /^\w.*\.xpm$/     ||
      /^\w.*\.pri$/     ||
      /^\w.*\.pro$/     ||
      /^\w.*\.ui$/      ||
      /^root\w+$/       ||
      /^\w.*\.tpp$/) {# print " $File::Find::name\n";
    {# print " $File::Find::name\n";
    push @main::search_files,  $File::Find::name;
    }
  }
}
