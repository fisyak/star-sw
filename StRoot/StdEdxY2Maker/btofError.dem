/*
   dX = X_hit - X_vertex
   dY = Y_hit - Y_vertex
   dZ = Z_hit - Z_vertex
   s_perp = sqrt(dX*dX + dY*dY); 	
   kCLight = 0.000299792458f;
   bq = B*fQ*kCLight;	
   a = dx*px+dy*py;
   abq = bq*a;
   dS = (a + dz*pz)/p2;

   dS = atan2( abq, pt2 + bq*(dy*px -dx*py) )/bq;
   Hz = kCLight * B
   curvature  = Hz / pT 

	

*/
load (f90) $
:lisp (setq *f90-output-line-length-max* 1000000000)
stardisp: true$
simplified_output: true$
debugmode(true);
v(pT) := 1/pT;
p2(pT) := pT*pT + pZ*pZ;
curvature(pT) := Hz * v(pT);
R(pT) := 1/curvature(pT);
C = sqrt(dX*dX + dY*dY);
s_perp(pT) := 2*R(pT) * asin(C/(2*R(pT)));
pathlength(pT) := sqrt(s_perp(pT)*s_perp(pT) + dZ*dZ);
beta(pT,tof) := pathlength(pT)/(tof*kCLight);
dM2(pT,tof) := p2(pT)/(q*q)*(1/(beta(pT,tof)*beta(pT,tof)) - 1) - M2;
betaI(pT,tof) := 1/beta(pT,tof);
F : jacobian([  dM2(pT,tof) ], [pT, tof]);
simplify;
trigsimp(F);
f90(F);
with_stdout ("F.txt",  f90(F));

T: jacobian([  betaI(pT,tof) ], [pT, tof]);
simplify;
trigsimp(T);
f90(T);
with_stdout ("T.txt",  f90(T));

/*
                           2    2   2        2        2     2 C*Hz       2
(%o19) matrix([- (sqrt(4*pT  - C *Hz )*((8*Hz *kCLight *asin (----)*pT*pZ
                                                              2*pT
       4   2        2        2          4 C*Hz    5
 - 2*Hz *dZ *kCLight *pT)*tof  + 32*asin (----)*pT
                                          2*pT
        2   2     2 C*Hz    3       4   4
 + 16*Hz *dZ *asin (----)*pT  + 2*Hz *dZ *pT)
                    2*pT
             3        2      C*Hz            2
 + ((- 8*C*Hz *kCLight *asin(----)*abs(pT)*pZ )
                             2*pT
         3        2      C*Hz    2             2
 - 8*C*Hz *kCLight *asin(----)*pT *abs(pT))*tof )
                         2*pT
           2    2   2          4 C*Hz    4       2   2     2 C*Hz    2
/(sqrt(4*pT  - C *Hz )*(16*asin (----)*pT  + 8*Hz *dZ *asin (----)*pT
                                 2*pT                        2*pT
                      2        2   2       2        2   2
     4   4   2   (2*Hz *kCLight *pZ  + 2*Hz *kCLight *pT )*tof
 + Hz *dZ )*q ), ---------------------------------------------])
                              2 C*Hz    2     2   2   2
                       (4*asin (----)*pT  + Hz *dZ )*q
                                2*pT
_

(%i20) f90(F)
F(1,1) = (2*pT*((kCLight**2*tof**2)/((4*asin(((C*Hz)/pT)/2.d+0)**2*pT**2)/Hz**2+dZ**2)-1))/q**2-(kCLight**2*((8*asin(((C*Hz)/pT)/2.d+0)**2*pT)/Hz**2-(4*C*asin(((C*Hz)/pT)/2.d+0))/(Hz*sqrt(1-((C**2*Hz**2)/pT**2)/4.d+0)))*(pZ**2+pT**2)*tof**2)/(((4*asin(((C*Hz)/pT)/2.d+0)**2*pT**2)/Hz**2+dZ**2)**2*q**2)
F(1,2) = (2*kCLight**2*(pZ**2+pT**2)*tof)/(((4*asin(((C*Hz)/pT)/2.d+0)**2*pT**2)/Hz**2+dZ**2)*q**2)

--------------------------------------------------------------------------------
(%i18) trigsimp(F)
                           2    2   2        2        2     2 C*Hz       2
(%o18) matrix([- (sqrt(4*pT  - C *Hz )*((8*Hz *kCLight *asin (----)*pT*pZ
                                                              2*pT
       4   2        2        2          4 C*Hz    5
 - 2*Hz *dZ *kCLight *pT)*tof  + 32*asin (----)*pT
                                          2*pT
        2   2     2 C*Hz    3       4   4
 + 16*Hz *dZ *asin (----)*pT  + 2*Hz *dZ *pT)
                    2*pT
             3        2      C*Hz            2
 + ((- 8*C*Hz *kCLight *asin(----)*abs(pT)*pZ )
                             2*pT
         3        2      C*Hz    2             2
 - 8*C*Hz *kCLight *asin(----)*pT *abs(pT))*tof )
                         2*pT
           2    2   2          4 C*Hz    4       2   2     2 C*Hz    2
/(sqrt(4*pT  - C *Hz )*(16*asin (----)*pT  + 8*Hz *dZ *asin (----)*pT
                                 2*pT                        2*pT
                      2        2   2       2        2   2
     4   4   2   (2*Hz *kCLight *pZ  + 2*Hz *kCLight *pT )*tof
 + Hz *dZ )*q ), ---------------------------------------------])
                              2 C*Hz    2     2   2   2
                       (4*asin (----)*pT  + Hz *dZ )*q
                                2*pT

(%i19) f90(F)
F(1,1) = (2*pT*((kCLight**2*tof**2)/((4*asin(((C*Hz)/pT)/2.d+0)**2*pT**2)/Hz**2+dZ**2)-1))/q**2-(kCLight**2*((8*asin(((C*Hz)/pT)/2.d+0)**2*pT)/Hz**2-(4*C*asin(((C*Hz)/pT)/2.d+0))/(Hz*sqrt(1-((C**2*Hz**2)/pT**2)/4.d+0)))*(pZ**2+pT**2)*tof**2)/(((4*asin(((C*Hz)/pT)/2.d+0)**2*pT**2)/Hz**2+dZ**2)**2*q**2)
F(1,2) = (2*kCLight**2*(pZ**2+pT**2)*tof)/(((4*asin(((C*Hz)/pT)/2.d+0)**2*pT**2)/Hz**2+dZ**2)*q**2)


(%i21) T:jacobian([betaI(pT,tof)],[pT,tof])
                [                  2 C*Hz                  C*Hz          ]
                [            8*asin (----)*pT     4*C*asin(----)         ]
                [                    2*pT                  2*pT          ]
                [   kCLight*(---------------- - -------------------)*tof ]
                [                    2                       2   2       ]
                [                  Hz                       C *Hz        ]
                [                               Hz*sqrt(1 - ------)      ]
(%o21)  Col 1 = [                                               2        ]
                [                                           4*pT         ]
                [ - ---------------------------------------------------- ]
                [                       2 C*Hz    2                      ]
                [                 4*asin (----)*pT                       ]
                [                         2*pT          2 3/2            ]
                [              2*(----------------- + dZ )               ]
                [                          2                             ]
                [                        Hz                              ]
                                              [            kCLight            ]
                                              [ ----------------------------- ]
                                              [            2 C*Hz    2        ]
                                      Col 2 = [      4*asin (----)*pT         ]
                                              [              2*pT          2  ]
                                              [ sqrt(----------------- + dZ ) ]
                                              [               2               ]
                                              [             Hz                ]
_

(%i22) simplify
(%o22)                             simplify
_

(%i23) trigsimp(T)
                                        2 C*Hz              2    2   2
(%o23) matrix([- (4*abs(Hz)*kCLight*asin (----)*pT*sqrt(4*pT  - C *Hz )*tof
                                          2*pT
                               C*Hz
 - 4*C*Hz*abs(Hz)*kCLight*asin(----)*abs(pT)*tof)
                               2*pT
           2    2   2         2 C*Hz    2     2   2 3/2
/(sqrt(4*pT  - C *Hz )*(4*asin (----)*pT  + Hz *dZ )   ), 
                                2*pT
         abs(Hz)*kCLight
---------------------------------])
           2 C*Hz    2     2   2
sqrt(4*asin (----)*pT  + Hz *dZ )
             2*pT
_

(%i24) f90(T)
T(1,1) = -(kCLight*((8*asin(((C*Hz)/pT)/2.d+0)**2*pT)/Hz**2-(4*C*asin(((C*Hz)/pT)/2.d+0))/(Hz*sqrt(1-((C**2*Hz**2)/pT**2)/4.d+0)))*((4*asin(((C*Hz)/pT)/2.d+0)**2*pT**2)/Hz**2+dZ**2)**((-3.d+0)/2.d+0)*tof)/2.d+0
T(1,2) = kCLight/sqrt((4*asin(((C*Hz)/pT)/2.d+0)**2*pT**2)/Hz**2+dZ**2)
(%o24)                               false
_
*/
